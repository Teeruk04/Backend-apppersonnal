// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230322095004_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Backend.Models.Academicposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("academic_branchcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("academic_branchname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("academic_position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("academic_refer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("academic_startdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Academicpositions");
                });

            modelBuilder.Entity("Backend.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Activi_enddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Activi_placename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Activi_position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Activi_startdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Backend.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("address_alley")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address_canton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address_country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address_district")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("address_enddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("address_housenumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address_province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address_road")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("address_startdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_statusA")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("id_statusA");

                    b.ToTable("Addresss");
                });

            modelBuilder.Entity("Backend.Models.Arrest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Arrest_crimescene")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Arrest_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Arrest_outcomeofthecase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Arrest_plaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Arrests");
                });

            modelBuilder.Entity("Backend.Models.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Chaild_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Child_birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Child_lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Child_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Child_nationlyty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Child_occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Child_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Child_position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Child_race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Child_religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Child_workplace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("id_title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("id_title");

                    b.ToTable("Childrens");
                });

            modelBuilder.Entity("Backend.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Createdat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Educa_course")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Educa_enddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Educa_location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Educa_placename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Educa_results")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Educa_startdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("id_level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("id_level");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Backend.Models.FatherAndMother", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fa_title")
                        .HasColumnType("int");

                    b.Property<int>("MO_title")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("fa_WPphone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fa_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fa_birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("fa_lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fa_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fa_nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fa_occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fa_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fa_placebirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fa_position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fa_race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fa_religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fa_workplace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mo_WPphone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mo_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("mo_birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("mo_lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mo_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mo_nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mo_occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mo_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mo_placebirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mo_position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mo_race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mo_religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mo_workplace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Fa_title");

                    b.HasIndex("MO_title");

                    b.HasIndex("UserId");

                    b.ToTable("FatherAndMothers");
                });

            modelBuilder.Entity("Backend.Models.Insignia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("insignia_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("insignia_receiveddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("insignia_year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Insignias");
                });

            modelBuilder.Entity("Backend.Models.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ReportLeaveId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("leave_enddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("leave_note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("leave_quantity")
                        .HasColumnType("real");

                    b.Property<DateTime>("leave_startdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("leave_type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportLeaveId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("Backend.Models.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8729),
                            Level_name = "ประถมศึกษา 6"
                        },
                        new
                        {
                            Id = 2,
                            Createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8731),
                            Level_name = "มัธยมศึกษา 3"
                        },
                        new
                        {
                            Id = 3,
                            Createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8732),
                            Level_name = "มัธยมศึกษา 6"
                        },
                        new
                        {
                            Id = 4,
                            Createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8733),
                            Level_name = "ปริญญาตรี"
                        },
                        new
                        {
                            Id = 5,
                            Createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8734),
                            Level_name = "ปริญญาโทร"
                        },
                        new
                        {
                            Id = 6,
                            Createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8735),
                            Level_name = "ปริญญาเอก"
                        });
                });

            modelBuilder.Entity("Backend.Models.Managementposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("id_statusS")
                        .HasColumnType("int");

                    b.Property<string>("manageP_agency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manageP_details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("manageP_enddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("manageP_position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manageP_refer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("manageP_startdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("id_statusS");

                    b.ToTable("Managementpositions");
                });

            modelBuilder.Entity("Backend.Models.Marriage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("id_statusPC")
                        .HasColumnType("int");

                    b.Property<int>("id_title")
                        .HasColumnType("int");

                    b.Property<string>("marria_WPphone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marria_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("marria_birdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("marria_divorce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marria_lastaddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marria_lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marria_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marria_nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marria_occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marria_phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marria_position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marria_race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marria_religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("marria_workplace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("marriia_weddingday")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("id_statusPC");

                    b.HasIndex("id_title");

                    b.ToTable("Marriages");
                });

            modelBuilder.Entity("Backend.Models.Petition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("peti_message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("peti_staus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Petitions");
                });

            modelBuilder.Entity("Backend.Models.ReportLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("ReportL_lastyear")
                        .HasColumnType("real");

                    b.Property<float>("ReportL_leave")
                        .HasColumnType("real");

                    b.Property<int>("ReportL_leaveTHHWWGB")
                        .HasColumnType("int");

                    b.Property<int>("ReportL_leaveforfasting")
                        .HasColumnType("int");

                    b.Property<int>("ReportL_leaveforstudy")
                        .HasColumnType("int");

                    b.Property<int>("ReportL_leavematerntity")
                        .HasColumnType("int");

                    b.Property<int>("ReportL_leaveordination")
                        .HasColumnType("int");

                    b.Property<float>("ReportL_leavepersonal")
                        .HasColumnType("real");

                    b.Property<float>("ReportL_leavesick")
                        .HasColumnType("real");

                    b.Property<int>("ReportL_leavespouse")
                        .HasColumnType("int");

                    b.Property<float>("ReportL_thisyear")
                        .HasColumnType("real");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReportLeaves");
                });

            modelBuilder.Entity("Backend.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("id_TypeS")
                        .HasColumnType("int");

                    b.Property<int>("id_starusS")
                        .HasColumnType("int");

                    b.Property<int>("salary_beforepostpone")
                        .HasColumnType("int");

                    b.Property<int>("salary_calculationbase")
                        .HasColumnType("int");

                    b.Property<DateTime>("salary_datenum")
                        .HasColumnType("datetime2");

                    b.Property<string>("salary_details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("salary_effectivedate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("salary_enddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("salary_ordernum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("salary_percentage")
                        .HasColumnType("real");

                    b.Property<float>("salary_salary")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("id_TypeS");

                    b.HasIndex("id_starusS");

                    b.ToTable("Salarys");
                });

            modelBuilder.Entity("Backend.Models.Sex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Sex_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sexs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Sex_name = "ชาย",
                            createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8704)
                        },
                        new
                        {
                            Id = 2,
                            Sex_name = "หญิง",
                            createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8707)
                        });
                });

            modelBuilder.Entity("Backend.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ครั้งก่อน"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ปัจจุบัน"
                        });
                });

            modelBuilder.Entity("Backend.Models.StatusA", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusAs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "เคยอาศัย"
                        },
                        new
                        {
                            Id = 2,
                            Name = "อาศัยในปัจจุบัน"
                        });
                });

            modelBuilder.Entity("Backend.Models.StatusM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("statusM_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusMs");
                });

            modelBuilder.Entity("Backend.Models.StatusPC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("statusPC_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusPCs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            statusPC_name = "ครั้งก่อน"
                        },
                        new
                        {
                            Id = 2,
                            statusPC_name = "ปัจจุบัน"
                        });
                });

            modelBuilder.Entity("Backend.Models.StatusU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("StatusU_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StatusUs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusU_name = "ข้าราชการ",
                            createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8775)
                        },
                        new
                        {
                            Id = 2,
                            StatusU_name = "พนักงานข้าราชการ",
                            createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8777)
                        },
                        new
                        {
                            Id = 3,
                            StatusU_name = "เจ้าหน้าที่",
                            createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8778)
                        });
                });

            modelBuilder.Entity("Backend.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title_name = "เด็กชาย",
                            createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8474)
                        },
                        new
                        {
                            Id = 2,
                            Title_name = "เด็กหญิง",
                            createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8487)
                        },
                        new
                        {
                            Id = 3,
                            Title_name = "นาย",
                            createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8488)
                        },
                        new
                        {
                            Id = 4,
                            Title_name = "นาง",
                            createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8489)
                        },
                        new
                        {
                            Id = 5,
                            Title_name = "นางสาว",
                            createdate = new DateTime(2023, 3, 22, 16, 50, 4, 169, DateTimeKind.Local).AddTicks(8490)
                        });
                });

            modelBuilder.Entity("Backend.Models.TitleM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TitleMs");
                });

            modelBuilder.Entity("Backend.Models.Travel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Cratedate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("travel_capital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("travel_city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("travel_county")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("travel_enddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("travel_purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("travel_startdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Travels");
                });

            modelBuilder.Entity("Backend.Models.TypeS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "เลื่อนขั้นเงินเดือนปกติ"
                        },
                        new
                        {
                            Id = 2,
                            Name = "เลื่อนขั้นเงินเดือนพิเศษ"
                        });
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("User_birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_cardnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_placeofbirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_religion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id_sex")
                        .HasColumnType("int");

                    b.Property<int>("id_statusU")
                        .HasColumnType("int");

                    b.Property<int>("id_title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("id_sex");

                    b.HasIndex("id_statusU");

                    b.HasIndex("id_title");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Models.Workhistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WorkH_employer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WorkH_enddate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkH_placename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkH_position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkH_reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WorkH_startdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkHistories");
                });

            modelBuilder.Entity("Backend.Models.Academicposition", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("Academicpositions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Models.Activity", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("Activity")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Models.Address", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserId");

                    b.HasOne("Backend.Models.StatusA", "StatusA")
                        .WithMany()
                        .HasForeignKey("id_statusA")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusA");
                });

            modelBuilder.Entity("Backend.Models.Arrest", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("Arrest")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Models.Child", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("children")
                        .HasForeignKey("UserId");

                    b.HasOne("Backend.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("id_title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Backend.Models.Education", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("Education")
                        .HasForeignKey("UserId");

                    b.HasOne("Backend.Models.Level", "Level")
                        .WithMany()
                        .HasForeignKey("id_level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Backend.Models.FatherAndMother", b =>
                {
                    b.HasOne("Backend.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("Fa_title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.TitleM", "TitleM")
                        .WithMany()
                        .HasForeignKey("MO_title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.User", null)
                        .WithMany("FatherAndMother")
                        .HasForeignKey("UserId");

                    b.Navigation("Title");

                    b.Navigation("TitleM");
                });

            modelBuilder.Entity("Backend.Models.Insignia", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("Insignias")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Models.Leave", b =>
                {
                    b.HasOne("Backend.Models.ReportLeave", null)
                        .WithMany("Leaves")
                        .HasForeignKey("ReportLeaveId");
                });

            modelBuilder.Entity("Backend.Models.Managementposition", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("Managementpositions")
                        .HasForeignKey("UserId");

                    b.HasOne("Backend.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("id_statusS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Backend.Models.Marriage", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("Marriage")
                        .HasForeignKey("UserId");

                    b.HasOne("Backend.Models.StatusPC", "StatusPC")
                        .WithMany()
                        .HasForeignKey("id_statusPC")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("id_title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusPC");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Backend.Models.Petition", b =>
                {
                    b.HasOne("Backend.Models.User", "Author")
                        .WithMany("Petitions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Backend.Models.ReportLeave", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("ReportLeaves")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Models.Salary", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("Salaries")
                        .HasForeignKey("UserId");

                    b.HasOne("Backend.Models.TypeS", "Types")
                        .WithMany()
                        .HasForeignKey("id_TypeS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("id_starusS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("Backend.Models.Travel", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("Travels")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasOne("Backend.Models.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("id_sex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.StatusU", "StatusU")
                        .WithMany()
                        .HasForeignKey("id_statusU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("id_title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sex");

                    b.Navigation("StatusU");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Backend.Models.Workhistory", b =>
                {
                    b.HasOne("Backend.Models.User", null)
                        .WithMany("Workhistory")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Models.ReportLeave", b =>
                {
                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("Academicpositions");

                    b.Navigation("Activity");

                    b.Navigation("Addresses");

                    b.Navigation("Arrest");

                    b.Navigation("Education");

                    b.Navigation("FatherAndMother");

                    b.Navigation("Insignias");

                    b.Navigation("Managementpositions");

                    b.Navigation("Marriage");

                    b.Navigation("Petitions");

                    b.Navigation("ReportLeaves");

                    b.Navigation("Salaries");

                    b.Navigation("Travels");

                    b.Navigation("Workhistory");

                    b.Navigation("children");
                });
#pragma warning restore 612, 618
        }
    }
}
